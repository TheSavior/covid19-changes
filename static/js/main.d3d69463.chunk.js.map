{"version":3,"sources":["cdcUpdatesMapping.js","App.js","serviceWorker.js","index.js"],"names":["convertShorthandToDate","shorthand","split","map","val","parseInt","year","month","day","Date","toLocaleString","weekday","NoUpdates","prevDate","nextDate","className","App","useEffect","ReactGA","pageview","window","location","pathname","search","dateOptions","Object","keys","CDCUpdates","reverse","useState","nextIndex","setNextIndex","prevIndex","setPrevIndex","formattedOptions","dateOption","index","value","label","prevIndexPointer","href","options","onChange","newValue","placeholder","oldValue","splitView","compareMethod","DiffMethod","WORDS","hideLineNumbers","Boolean","hostname","match","initialize","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oSAKe,G,MAAA,CACb,WAAW,wqMACX,WAAW,wqMACX,WAAW,46MACX,WAAW,43MACX,WAAW,g9NACX,WAAW,woPACX,WAAW,srPACX,WAAW,m1QACX,WAAW,m1QACX,WAAW,wnRACX,WAAW,ouSACX,WAAW,4mUACX,WAAW,4mUACX,WAAW,4mUACX,WAAW,s/UACX,WAAW,81WACX,WAAW,81WACX,WAAW,u0WACX,WAAW,u0WACX,WAAW,u0WACX,WAAW,u0WACX,WAAW,u0WACX,WAAW,u0WACX,WAAW,u0WACX,WAAW,imXACX,WAAW,imXACX,WAAW,uuXACX,WAAW,uuXACX,WAAW,uuXACX,WAAW,6/WACX,WAAW,k/WACX,WAAW,k/WACX,WAAW,o4UACX,WAAW,ooYACX,WAAW,ooYACX,WAAW,soeClCb,SAASA,EAAuBC,GAAY,IAAD,EACdA,EAAUC,MAAM,KAAKC,KAAI,SAAAC,GAAG,OAAIC,SAASD,EAAK,OADhC,mBAClCE,EADkC,KAC5BC,EAD4B,KACrBC,EADqB,KAEzC,OAAO,IAAIC,KAAK,KAAOH,EAAMC,EAAQ,EAAGC,GAAKE,eAAe,QAAS,CACnEC,QAAS,OACTJ,MAAO,QACPC,IAAK,YA4ET,SAASI,EAAT,GAA4C,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAC7B,OACE,yBAAKC,UAAU,eAAf,kDACkD,IAC/Cf,EAAuBa,GAF1B,QAE0Cb,EAAuBc,IAKtDE,MAjFf,WACEC,qBAAU,WACRC,IAAQC,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,UAC3D,IAEH,IAAMC,EAAcC,OAAOC,KAAKC,GAAYC,UAL/B,EAMqBC,mBAAS,GAN9B,mBAMNC,EANM,KAMKC,EANL,OAOqBF,mBAAS,GAP9B,mBAONG,EAPM,KAOKC,EAPL,KASPC,EAAmBV,EAAYrB,KAAI,SAACgC,EAAYC,GAAb,MAAwB,CAC/DC,MAAOD,EACPE,MAAOtC,EAAuBmC,OAG1BtB,EAAWW,EAAYQ,GACvBlB,EAAWU,EAAYM,GAgB7B,OAbAb,qBAAU,WAGR,IAFA,IAAIsB,EAAmBP,EAGrBL,EAAWH,EAAYM,MACvBH,EAAWH,EAAYe,KAEvBA,IAGFN,EAAaM,KACZ,IAGD,yBAAKxB,UAAU,OACb,4CACgB,IACd,uBAAGyB,KAAK,0DAAR,2BAIF,yBAAKzB,UAAU,mBACb,kBAAC,IAAD,CACE0B,QAASP,EACTQ,SAAU,SAAAC,GACRV,EAAaU,EAASN,QAExBA,MAAOrC,EAAuBa,GAC9B+B,YAAY,kCAEd,kBAAC,IAAD,CACEH,QAASP,EACTQ,SAAU,SAAAC,GACRZ,EAAaY,EAASN,QAExBA,MAAOrC,EAAuBc,GAC9B8B,YAAY,iCAGfjB,EAAWb,KAAca,EAAWd,GACnC,kBAACD,EAAD,CAAWC,SAAUA,EAAUC,SAAUA,IAEzC,kBAAC,IAAD,CACE+B,SAAUlB,EAAWd,GACrB8B,SAAUhB,EAAWb,GACrBgC,WAAW,EACXC,cAAeC,aAAWC,MAC1BC,iBAAiB,MCrEPC,QACW,cAA7B/B,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASC,MACvB,2DCXNnC,IAAQoC,WAAW,iBAEnBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3d69463.chunk.js","sourcesContent":["// This file is generated by running\n// yarn run generate-mapping\n// Do not modify this file directly\nimport raw from 'raw.macro';\n\nexport default {\n  '20-01-21': raw('../cdcupdates/20-01-21.txt'),\n  '20-01-22': raw('../cdcupdates/20-01-22.txt'),\n  '20-01-23': raw('../cdcupdates/20-01-23.txt'),\n  '20-01-24': raw('../cdcupdates/20-01-24.txt'),\n  '20-01-25': raw('../cdcupdates/20-01-25.txt'),\n  '20-01-26': raw('../cdcupdates/20-01-26.txt'),\n  '20-01-27': raw('../cdcupdates/20-01-27.txt'),\n  '20-01-28': raw('../cdcupdates/20-01-28.txt'),\n  '20-01-29': raw('../cdcupdates/20-01-29.txt'),\n  '20-01-30': raw('../cdcupdates/20-01-30.txt'),\n  '20-01-31': raw('../cdcupdates/20-01-31.txt'),\n  '20-02-01': raw('../cdcupdates/20-02-01.txt'),\n  '20-02-02': raw('../cdcupdates/20-02-02.txt'),\n  '20-02-03': raw('../cdcupdates/20-02-03.txt'),\n  '20-02-04': raw('../cdcupdates/20-02-04.txt'),\n  '20-02-05': raw('../cdcupdates/20-02-05.txt'),\n  '20-02-06': raw('../cdcupdates/20-02-06.txt'),\n  '20-02-07': raw('../cdcupdates/20-02-07.txt'),\n  '20-02-08': raw('../cdcupdates/20-02-08.txt'),\n  '20-02-09': raw('../cdcupdates/20-02-09.txt'),\n  '20-02-10': raw('../cdcupdates/20-02-10.txt'),\n  '20-02-11': raw('../cdcupdates/20-02-11.txt'),\n  '20-02-12': raw('../cdcupdates/20-02-12.txt'),\n  '20-02-13': raw('../cdcupdates/20-02-13.txt'),\n  '20-02-14': raw('../cdcupdates/20-02-14.txt'),\n  '20-02-15': raw('../cdcupdates/20-02-15.txt'),\n  '20-02-16': raw('../cdcupdates/20-02-16.txt'),\n  '20-02-17': raw('../cdcupdates/20-02-17.txt'),\n  '20-02-18': raw('../cdcupdates/20-02-18.txt'),\n  '20-02-19': raw('../cdcupdates/20-02-19.txt'),\n  '20-02-20': raw('../cdcupdates/20-02-20.txt'),\n  '20-02-21': raw('../cdcupdates/20-02-21.txt'),\n  '20-02-22': raw('../cdcupdates/20-02-22.txt'),\n  '20-02-23': raw('../cdcupdates/20-02-23.txt'),\n  '20-02-24': raw('../cdcupdates/20-02-24.txt'),\n  '20-02-29': raw('../cdcupdates/20-02-29.txt'),\n};\n","import React, { useState, useEffect } from 'react';\nimport ReactDiffViewer, { DiffMethod } from 'react-diff-viewer';\nimport ReactGA from 'react-ga';\nimport Dropdown from 'react-dropdown';\nimport './App.css';\nimport CDCUpdates from './cdcUpdatesMapping';\n\nfunction convertShorthandToDate(shorthand) {\n  const [year, month, day] = shorthand.split('-').map(val => parseInt(val, 10));\n  return new Date('20' + year, month - 1, day).toLocaleString('en-US', {\n    weekday: 'long',\n    month: 'short',\n    day: 'numeric',\n  });\n}\n\nfunction App() {\n  useEffect(() => {\n    ReactGA.pageview(window.location.pathname + window.location.search);\n  }, []);\n\n  const dateOptions = Object.keys(CDCUpdates).reverse();\n  const [nextIndex, setNextIndex] = useState(0);\n  const [prevIndex, setPrevIndex] = useState(1);\n\n  const formattedOptions = dateOptions.map((dateOption, index) => ({\n    value: index,\n    label: convertShorthandToDate(dateOption),\n  }));\n\n  const prevDate = dateOptions[prevIndex];\n  const nextDate = dateOptions[nextIndex];\n\n  // On mount, find the most recent previous date that results in a diff\n  useEffect(() => {\n    let prevIndexPointer = prevIndex;\n\n    while (\n      CDCUpdates[dateOptions[nextIndex]] ===\n      CDCUpdates[dateOptions[prevIndexPointer]]\n    ) {\n      prevIndexPointer++;\n    }\n\n    setPrevIndex(prevIndexPointer);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Comparison of{' '}\n        <a href=\"https://www.cdc.gov/coronavirus/2019-nCoV/summary.html\">\n          CDC's COVID-19 updates\n        </a>\n      </h1>\n      <div className=\"date-picker-row\">\n        <Dropdown\n          options={formattedOptions}\n          onChange={newValue => {\n            setPrevIndex(newValue.value);\n          }}\n          value={convertShorthandToDate(prevDate)}\n          placeholder=\"Select a date to compare from\"\n        />\n        <Dropdown\n          options={formattedOptions}\n          onChange={newValue => {\n            setNextIndex(newValue.value);\n          }}\n          value={convertShorthandToDate(nextDate)}\n          placeholder=\"Select a date to compare to\"\n        />\n      </div>\n      {CDCUpdates[nextDate] === CDCUpdates[prevDate] ? (\n        <NoUpdates prevDate={prevDate} nextDate={nextDate} />\n      ) : (\n        <ReactDiffViewer\n          oldValue={CDCUpdates[prevDate]}\n          newValue={CDCUpdates[nextDate]}\n          splitView={true}\n          compareMethod={DiffMethod.WORDS}\n          hideLineNumbers={true}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction NoUpdates({ prevDate, nextDate }) {\n  return (\n    <div className=\"page-center\">\n      No changes found on CDC's website found between{' '}\n      {convertShorthandToDate(prevDate)} and {convertShorthandToDate(nextDate)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactGA from 'react-ga';\n\nReactGA.initialize('UA-54732104-3');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}